介绍
#####


kubernetes与openshift
================================

kubernetes本身已成为红帽当中的一种PAAS，PAAS是云计算当中的一种形式，叫平台即服务，红帽内部的平台即服务产品叫openshift，而openshift的核心，就是kubernetes，所以从这个角度来讲kubernetes只是一个容器编排工具。
它还没有到完整的PAAS这种云计算平台的标准，openshift是其中一个实现，我们也可以理解为openshift是kubernetes的发行版。

kubernetes做的非常底层，真正离用户的终端使用，要自己使用kubernetes需要自己在生产上还要自己部署很多工具，以解决对devops的需要，或者解决自己对完整的PAAS平台的需要，而openshift就是一个完整的集成的解决方案。
它里面拥有了paas平台devops平台需要的一切的工具，都直接整合进去了。


kubernetes的特点
======================

#. 自动装箱
    基于资源依赖及其他约束能够自动完成容器的部署，而且不影响其可用性。

#. 自我修复
    有自愈能力,一旦一个容器崩了，由于考虑到容器非常轻量的问题，它可以在一秒钟启动。假设镜像是做好的，镜像是做好完成的，能够完成最快在一秒钟启动起来。有些应用程序初始化自身笔记慢的，则需要的时间更长一点。
    所以，如果一个容器崩了，我们没必要修复它，将容器直接kill掉，然后重新启动一个，用这种方式来替代修复。
    有了k8s这样的容器编排平台后，我们更多的关注的是群体，而不是个体了，个体坏了之后直接干掉，再重新启动一个。

#. 水平扩展
    一个容器不够，再启一个，还不够就再启一个，可以不断的进行向上扩展，只要我们的物理平台资源支撑是足够的。

#. 服务发现和负载均衡
    当我需要在k8s上运行很多的应用程序的时候，程序和程序之间那种关系像微服务化以后，一个微服务如果依赖于其他服务，他能够用服务发现的方式找到依赖它的服务，更重要的是，每一个服务如果启了多个容器，它能实现自动做负载均衡。

#. 自动发现和回滚
#. 密钥和配置管理

- master

负责总的管理，master是整个集群的大脑，它有三个核心组件。

#. 第一，apiserver，负责接受和处理请求的。
#. 第二，scheduler,调度容器创建的请求。
#. 第三，controller-manager，控制器管理器，确保已创建的容器处于健康状态。

- scheduler

负责调度，负责将任务分配给合适的node


- kubelet

负责管理pod和里面的容器


**如何确保这个容器始终是健康的呢？**

用于监控容器是否健康的，是控制器。

他一旦故障之后怎么知道它是故障了呢？所以我要持续的监控他们，确保他们始终是健康的， kubernetes还实现了一大堆的叫控制器的应用程序，负责去监控它所管理的每一个容器是否是健康的。
一旦发现不是健康的，控制器就负责在向master api server发送请求，所我的容器挂了一个，你再帮我调度重新起一个。 然后master就从其他节点中挑一个重新启动起来。

所以，这里我们有一个服务，叫做控制器，controller，这个控制器需要在本地不停的loop中，也就是循环，这个循环用于周期性探测，持续性探测它管理的容器是否是健康的，一旦不健康，
甚至一旦不符合用户所定义的目标工作状态，就需要确保它始终不断的移向用户所期望的状态，或者说向用户所期望的状态进行迁移，以确保达到用户的期望。



**如果控制器挂了呢？怎么办？**

如果控制器挂了，那么容器的健康就无法得到保证了。

那么这就要说到第三个重要的组件了，在master之后，我们做了第三个组件，非常重要的组件，叫做控制器管理器，叫做controller manager，如果控制器不健康了，有控制器管理器确保它是健康的，就ok了。

那么如果控制器管理器不健康了呢？ 因此，在控制器管理器级别做冗余，控制器管理器也是被做冗余管理的效果的。