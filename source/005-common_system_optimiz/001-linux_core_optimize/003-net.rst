net
######


防止部分SYN攻击
========================

::

    ######################## cat /proc/sys/net/ipv4/tcp_syncookies
    # 默认值：1
    # 作用：是否打开SYN Cookie功能，该功能可以防止部分SYN攻击
    net.ipv4.tcp_syncookies = 1

可用端口的范围
=====================

::

    ######################## cat /proc/sys/net/ipv4/ip_local_port_range
    # 默认值：32768   61000
    # 作用：可用端口的范围
    net.ipv4.ip_local_port_range = 1024  65535

TCP时间戳
=============

tcp_fin_timeout
-------------------

:默认值: 60
:描述: 对于本端断开的socket连接，TCP保持在FIN_WAIT_2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为 60 秒。过去在2.2版本的内核中是 180 秒。您可以设置该值﹐但需要注意﹐如果您的机器为负载很重的web服务器﹐您可能要冒内存被大量无效数据报填满的风险﹐FIN-WAIT-2 sockets 的危险性低于 FIN-WAIT-1 ﹐因为它们最多只吃 1.5K 的内存﹐但是它们存在时间更长。另外参考 tcp_max_orphans。
:文件地址:  /proc/sys/net/ipv4/tcp_fin_timeout

:建议值:

::

    net.ipv4.tcp_fin_timeout = 30

tcp_timestamps
====================

::

    ######################## cat /proc/sys/net/ipv4/tcp_timestamps
    # 默认值：1
    # 作用：TCP时间戳
    net.ipv4.tcp_timestamps = 1

快速回收Time_wait
======================


::

    net.ipv4.tcp_syncookies = 1
    net.ipv4.tcp_tw_reuse = 1
    net.ipv4.tcp_tw_recycle = 1
    net.ipv4.tcp_fin_timeout = 30


::


    ######################## cat /proc/sys/net/ipv4/tcp_tw_recycle
    # 默认值：0
    # 作用：针对TIME-WAIT，不要开启。不少文章提到同时开启tcp_tw_recycle和tcp_tw_reuse，会带来C/S在NAT方面的异常
    # 个人接受的做法是，开启tcp_tw_reuse，增加ip_local_port_range的范围，减小tcp_max_tw_buckets和tcp_fin_timeout的值
    # 参考：http://ju.outofmemory.cn/entry/91121, http://www.cnblogs.com/lulu/p/4149312.html
    net.ipv4.tcp_tw_recycle = 0

    ######################## cat /proc/sys/net/ipv4/tcp_tw_reuse
    # 默认值：0
    # 作用：针对TIME-WAIT，做为客户端可以启用（例如，作为nginx-proxy前端代理，要访问后端的服务）
    net.ipv4.tcp_tw_reuse = 1

    ######################## cat /proc/sys/net/ipv4/tcp_max_tw_buckets
    # 默认值：262144
    # 作用：针对TIME-WAIT，配置其上限。如果降低这个值，可以显著的发现time-wait的数量减少，但系统日志中可能出现如下记录：
    # kernel: TCP: time wait bucket table overflow
    # 对应的，如果升高这个值，可以显著的发现time-wait的数量增加。
    # 综合考虑，保持默认值。
    net.ipv4.tcp_max_tw_buckets = 262144


设置orphans的最大值
============================

系统所能处理不属于任何进程的TCP sockets最大数量（主动关闭端发送了FIN后转到FIN_WAIT_1，这时TCP连接就不属于某个进程了）。假如超过这个数量，那么不属于任何进程的连接会被立即reset，
并同时显示警告信息。之所以要设定这个限制，纯粹为了抵御那些简单的 DoS 攻击﹐千万不要依赖这个或是人为的降低这个限制(这个值Redhat AS版本中设置为32768，但是很多防火墙修改的时候,建议该值修改为2000)


::

    ######################## cat /proc/sys/net/ipv4/tcp_max_orphans
    # 默认值：16384
    # 作用：orphans的最大值

    net.ipv4.tcp_max_orphans = 3276800


增大SYN队列的长度，容纳更多连接
=========================================
对于那些依然还未获得客户端确认的连接请求﹐需要保存在队列中最大数目（即半连接队列长度，半连接即接收了SYN，发送了SYN-ACK，但是还没有收到客户端ACK的连接）。
对于超过 128Mb 内存的系统﹐默认值是 1024 ﹐低于 128Mb 的则为 128。如果服务器经常出现过载﹐可以尝试增加这个数字。警告﹗假如您将此值设为大于 1024﹐
最好修改 include/net/tcp.h 里面的 TCP_SYNQ_HSIZE ﹐以保持TCP_SYNQ_HSIZE*16<=tcp_max_syn_backlog ﹐并且编进核心之内。(SYN Flood攻击利用TCP协议三次握手的缺陷，
伪造虚假源IP地址发送大量TCP-SYN半打开连接到目标系统，最终导致目标系统Socket队列资源耗尽而无法接受新的连接。为了应付这种攻击，现代Unix系统中普遍采用多连接队列处理的方式来缓冲(而不是解决)这种攻击，
是用一个基本队列处理正常的完全连接应用(Connect()和Accept() )，是用另一个队列单独存放半打开连接。这种双队列处理方式和其他一些系统内核措施(例如Syn-Cookies/Caches)联合应用时，
能够比较有效的缓解小规模的SYN Flood攻击(事实证明<1000p/s)。加大SYN队列长度可以容纳更多等待连接的网络连接数，所以对Server来说可以考虑增大该值.)



::

    ######################## cat /proc/sys/net/ipv4/tcp_max_syn_backlog
    # 默认值：128
    # 作用：增大SYN队列的长度，容纳更多连接
    net.ipv4.tcp_max_syn_backlog = 819200


keepalive探测设置
========================

::

    ######################## cat /proc/sys/net/ipv4/tcp_keepalive_intvl
    # 默认值：75
    # 作用：探测失败后，间隔几秒后重新探测
    net.ipv4.tcp_keepalive_intvl = 30

    ######################## cat /proc/sys/net/ipv4/tcp_keepalive_probes
    # 默认值：9
    # 作用：TCP发送keepalive探测，以确定该连接已经断开的次数。(注意:保持连接仅在SO_KEEPALIVE套接字选项被打开是才发送.次数默认不需要修改,当然根据情形也可以适当地缩短此值.设置为5比较合适)
    net.ipv4.tcp_keepalive_probes = 3

    ######################## cat /proc/sys/net/ipv4/tcp_keepalive_time
    # 默认值：7200
    # 作用：间隔多久发送1次keepalive探测包  当keepalive打开的情况下，TCP发送keepalive消息的频率，即每隔多长时间发送一次。(由于目前网络攻击等因素,造成了利用这个进行的攻击很频繁,曾经也有cu的朋友提到过,说如果2边建立了连接,然后不发送任何数据或者rst/fin消息,那么持续的时间是不是就是2小时,空连接攻击?tcp_keepalive_time就是预防此情形的.我个人在做nat服务的时候的修改值为1800秒)
    net.ipv4.tcp_keepalive_time = 1200

设置 conntrack tcp 状态的超时时间
=======================================

::

    ######################## cat /proc/sys/net/netfilter/nf_conntrack_tcp_timeout_established
    # 默认值：432000
    # 作用：设置 conntrack tcp 状态的超时时间，如果系统出现下述异常时要考虑调整：
    # ping: sendmsg: Operation not permitted
    # kernel: nf_conntrack: table full, dropping packet.
    # 参考：http://www.linuxidc.com/Linux/2012-11/75151.htm, http://blog.csdn.net/dog250/article/details/9318843
    net.netfilter.nf_conntrack_tcp_timeout_established = 600

设置 conntrack 的上限
===========================

::

    ######################## cat /proc/sys/net/netfilter/nf_conntrack_max
    # 默认值：65535
    # 作用：设置 conntrack 的上限，如果系统出现下述异常时要考虑调整：
    # ping: sendmsg: Operation not permitted
    # kernel: nf_conntrack: table full, dropping packet.
    # 参考：https://blog.yorkgu.me/2012/02/09/kernel-nf_conntrack-table-full-dropping-packet/, http://www.cnblogs.com/mydomain/archive/2013/05/19/3087153.html
    net.netfilter.nf_conntrack_max = 655350


网卡设备将请求放入队列的长度
===============================

::

    ######################## cat /proc/sys/net/core/netdev_max_backlog
    # 默认值：1000
    # 作用：网卡设备将请求放入队列的长度
    net.core.netdev_max_backlog = 500000


已经成功建立连接的套接字将要进入队列的长度
=====================================================

::

    ######################## cat /proc/sys/net/core/somaxconn
    # 默认值：128
    # 作用：已经成功建立连接的套接字将要进入队列的长度
    net.core.somaxconn = 65536


TCP数据发送窗口大小
=========================

::

    ######################## cat /proc/sys/net/core/rmem_default
    # 默认值：212992
    # 作用：默认的TCP数据接收窗口大小（字节）
    net.core.rmem_default = 8388608

    ######################## cat /proc/sys/net/core/wmem_default
    # 默认值：212992
    # 作用：默认的TCP数据发送窗口大小（字节）
    net.core.wmem_default = 8388608

    ######################## cat /proc/sys/net/core/rmem_max
    # 默认值：212992
    # 作用：最大的TCP数据接收窗口大小（字节）
    net.core.rmem_max = 16777216

    ######################## cat /proc/sys/net/core/wmem_max
    # 默认值：212992
    # 作用：最大的TCP数据发送窗口大小（字节）
    net.core.wmem_max = 16777216

内存使用的下限  警戒值  上限
====================================

::


    ######################## cat /proc/sys/net/ipv4/tcp_mem
    # 默认值：94389   125854  188778
    # 作用：内存使用的下限  警戒值  上限
    net.ipv4.tcp_mem = 94500000   915000000   927000000


socket接收缓冲区内存使用的下限  警戒值  上限
========================================================

::

    ######################## cat /proc/sys/net/ipv4/tcp_rmem
    # 默认值：4096    87380   6291456
    # 作用：socket接收缓冲区内存使用的下限  警戒值  上限
    net.ipv4.tcp_rmem = 4096   87380   16777216

socket发送缓冲区内存使用的下限  警戒值  上限
==============================================================

::

    ######################## cat /proc/sys/net/ipv4/tcp_wmem
    # 默认值：4096    16384   4194304
    # 作用：socket发送缓冲区内存使用的下限  警戒值  上限
    net.ipv4.tcp_wmem = 4096   16384   16777216


tcp stream相关设置
============================

::

    ######################## cat /proc/sys/net/ipv4/tcp_thin_dupack
    # 默认值：0
    # 作用：收到dupACK时要去检查tcp stream是不是 thin ( less than 4 packets in flight)
    net.ipv4.tcp_thin_dupack = 1

    ######################## cat /proc/sys/net/ipv4/tcp_thin_linear_timeouts
    # 默认值：0
    # 作用：重传超时后要去检查tcp stream是不是 thin ( less than 4 packets in flight)
    net.ipv4.tcp_thin_linear_timeouts = 1

    ######################## cat /proc/sys/net/unix/max_dgram_qlen
    # 默认值：10
    # 作用：UDP队列里数据报的最大个数
    net.unix.max_dgram_qlen = 30000



每个套接字所允许的最大缓冲区的大小
=========================================



参数： /proc/sys/net/core/optmem_max

描述： 表示每个套接字所允许的最大缓冲区的大小。

默认值： 20480

优化值： 81920


tcp_synack_retries
=========================

参数： tcp_synack_retries

默认值：5

描述：对于远端的连接请求SYN，内核会发送SYN ＋ ACK数据报，以确认收到上一个 SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的 SYN+ACK 数目。不应该大于255，默认值是5，对应于180秒左右时间。(可以根据上面的 tcp_syn_retries 来决定这个值)



tcp_window_scaling
============================

参数： tcp_window_scaling
默认值：1
描述： 该文件表示设置tcp/ip会话的滑动窗口大小是否可变。参数值为布尔值，为1时表示可变，为0时表示不可变。tcp/ip通常使用的窗口最大可达到 65535 字节，对于高速网络，该值可能太小，这时候如果启用了该功能，可以使tcp/ip滑动窗口大小增大数个数量级，从而提高数据传输的能力(RFC 1323)。（对普通地百M网络而言，关闭会降低开销，所以如果不是高速网络，可以考虑设置为0）