自建CA证书搭建https服务器
##############################



1、创建相关目录
=======================
将openssl.cnf配置文件拷贝到当前目录下并创建以下在配置文件中指定的子文件夹

.. code-block:: bash

    mkdir demoCA
    cd demoCA

.. note::

    index.txt为空，serial必须写入内容，且为字符串格式的数字（比如1000)

.. code-block:: bash

    mkdir srl certs newcerts
    touch index.txt serial
    echo 1000 > serial
    cd ..
    cp /etc/pki/tls/openssl.cnf  .

2、生成根证书
===================

.. code-block:: bash

    mkdir ca

a).生成根证书私钥(key文件)
----------------------------------

.. code-block:: bash

    openssl genrsa -aes256 -out ca/ca.key 2048

b).生成根证书签发申请文件(csr文件)
---------------------------------------------

.. code-block:: bash

    openssl req -utf8 -new -key ca/ca.key -out ca/ca.csr -config ./openssl.cnf

c).自签发根证书(crt文件)
---------------------------------

.. code-block:: bash

    openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey ca/ca.key -in ca/ca.csr -out ca/ca.crt

3、用根证书签发server端证书
====================================

.. code-block:: bash

    mkdir server

a).生成根证书私钥(key文件)
--------------------------------

.. code-block:: bash

    openssl genrsa -aes256 -out server/server.key 2048
    cd server
    cp server.key server.key.org
    openssl rsa -in server.key.org -out server.key
    cd ..

b).生成根证书签发申请文件(csr文件)
-------------------------------------------

.. code-block:: bash

    openssl req -utf8 -new -key server/server.key -out server/server.csr -config ./openssl.cnf
    cp -rap  demoCA/* /etc/pki/CA/

c).使用根证书签发服务端证书
----------------------------

.. code-block:: bash

    openssl ca -in server/server.csr -out server/server.crt -cert ca/ca.crt -keyfile ca/ca.key -config ./openssl.cnf

将证书部署到nginx，做到这个步骤就行了，nginx需要用到的证书就在./server 目录下

**部署到nginx**

我们安装好nginx之后，只需要把/etc/nginx/nginx.conf里关于https配置的一些内容的注销取消掉，然后修改下ssl_certificate和ssl_certificate_key的路径就可以了。

.. code-block:: bash

    $ yum install epel-release -y
    $ yum install nginx -y
    $ vi /etc/nginx/nginx.conf
        server {
            listen       443 ssl http2 default_server;
            listen       [::]:443 ssl http2 default_server;
            server_name  _;
            root         /usr/share/nginx/html;

            ssl_certificate "/root/server/server.crt";
            ssl_certificate_key "/root/server/server.key";
            ssl_session_cache shared:SSL:1m;
            ssl_session_timeout  10m;
            ssl_ciphers HIGH:!aNULL:!MD5;
            ssl_prefer_server_ciphers on;

            # Load configuration files for the default server block.
            include /etc/nginx/default.d/*.conf;

            location / {
            }

            error_page 404 /404.html;
                location = /40x.html {
            }

            error_page 500 502 503 504 /50x.html;
                location = /50x.html {
            }
        }
    $ nginx -t
    $ systemctl start nginx
    $ setenforce 0
    $ systemctl stop firewalld



d).将密钥和证书合并成一个文件
-------------------------------------
该操作是可选的，有需求就做，我们用nginx，就不用做下面这个操作了。

.. code-block:: bash

    cp server/server.key server/server.pem
    cat server/server.crt >> server/server.pem
    mkdir client
    openssl genrsa -aes256 -out client/client.key 2048
    openssl req -new -key client/client.key -out client/client.csr -config ./openssl.cnf
    openssl ca -in client/client.csr -out client/client.crt -cert ca/ca.crt -keyfile ca/ca.key -config ./openssl.cnf
    cp client/client.key client/client.pem
    cat client/client.crt >> client/client.pem





4、一键创建所有证书脚本参考
=====================================

.. literalinclude:: ../../../code/shell/build_ca_ssl_key.sh
    :language: shell
    :linenos:


